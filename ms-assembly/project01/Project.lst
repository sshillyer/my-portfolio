Microsoft (R) Macro Assembler Version 14.00.23506.0	    01/05/16 22:09:56
+Programming Assignment 1    (project01.asm		     Page 1 - 1


				TITLE Programming Assignment 1    (project01.asm)

				; Author: Shawn S Hillyer	Email: hillyers@oregonstate.edu
				; CS271-400 / Project ID: Programming Assignment 1                Date: 01/14/2016
				; Description:
				;	1. Display your name and program title on the output screen.
				;	2. Display instructions for the user.
				;	3. Prompt the user to enter two numbers.
				;	4. Calculate the sum, difference, product, (integer) quotient and remainder of the numbers.
				;	5. Display a terminating message.
				;
				; Extra-credit options:
				; [Implemented] 1. Repeat until the user chooses to quit. 
				; [Implemented] 2. Validate the second number to be less than the first. 
				; [NYI]		3. Calculate and display the quotient as a floating-point number, rounded to the nearest .001.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				; Strings & characters for printing intro / instructions / exit message to output

 00000000 50 72 6F 67 72		programTitle 	BYTE	"Programming Assignment 1, ",0
	   61 6D 6D 69 6E
	   67 20 41 73 73
	   69 67 6E 6D 65
	   6E 74 20 31 2C
	   20 00
 0000001B 43 72 65 61 74		myName		BYTE	"Created by Shawn Hillyer",0
	   65 64 20 62 79
	   20 53 68 61 77
	   6E 20 48 69 6C
	   6C 79 65 72 00
 00000034 50 6C 65 61 73		instruct_1	BYTE	"Please enter two integers. Program will calculate and display the sum, ",0
	   65 20 65 6E 74
	   65 72 20 74 77
	   6F 20 69 6E 74
	   65 67 65 72 73
	   2E 20 50 72 6F
	   67 72 61 6D 20
	   77 69 6C 6C 20
	   63 61 6C 63 75
	   6C 61 74 65 20
	   61 6E 64 20 64
	   69 73 70 6C 61
	   79 20 74 68 65
	   20 73 75 6D 2C
	   20 00
 0000007C 64 69 66 66 65		instruct_2	BYTE	"difference, product, quotient, and remainder for you.",0
	   72 65 6E 63 65
	   2C 20 70 72 6F
	   64 75 63 74 2C
	   20 71 75 6F 74
	   69 65 6E 74 2C
	   20 61 6E 64 20
	   72 65 6D 61 69
	   6E 64 65 72 20
	   66 6F 72 20 79
	   6F 75 2E 00
 000000B2 54 68 61 6E 6B		exitMsg		BYTE	"Thank's for joining me... see you next time.",0
	   27 73 20 66 6F
	   72 20 6A 6F 69
	   6E 69 6E 67 20
	   6D 65 2E 2E 2E
	   20 73 65 65 20
	   79 6F 75 20 6E
	   65 78 74 20 74
	   69 6D 65 2E 00
 000000DF 45 6E 74 65 72		promptVal_1	BYTE	"Enter the first value (must be > second value): ",0
	   20 74 68 65 20
	   66 69 72 73 74
	   20 76 61 6C 75
	   65 20 28 6D 75
	   73 74 20 62 65
	   20 3E 20 73 65
	   63 6F 6E 64 20
	   76 61 6C 75 65
	   29 3A 20 00
 00000110 45 6E 74 65 72		promptVal_2	BYTE	"Enter the second value (must be < first value): ",0
	   20 74 68 65 20
	   73 65 63 6F 6E
	   64 20 76 61 6C
	   75 65 20 28 6D
	   75 73 74 20 62
	   65 20 3C 20 66
	   69 72 73 74 20
	   76 61 6C 75 65
	   29 3A 20 00
 00000141 2A 2A 45 43 3A		ecIntro_1	BYTE	"**EC: Program repeats until user chooses to quit.",0
	   20 50 72 6F 67
	   72 61 6D 20 72
	   65 70 65 61 74
	   73 20 75 6E 74
	   69 6C 20 75 73
	   65 72 20 63 68
	   6F 6F 73 65 73
	   20 74 6F 20 71
	   75 69 74 2E 00
 00000173 2A 2A 45 43 3A		ecIntro_2	BYTE	"**EC: Program Validates the second number to be less than the first.",0
	   20 50 72 6F 67
	   72 61 6D 20 56
	   61 6C 69 64 61
	   74 65 73 20 74
	   68 65 20 73 65
	   63 6F 6E 64 20
	   6E 75 6D 62 65
	   72 20 74 6F 20
	   62 65 20 6C 65
	   73 73 20 74 68
	   61 6E 20 74 68
	   65 20 66 69 72
	   73 74 2E 00
 000001B8 2A 2A 45 43 3A		ecIntro_3	BYTE	"**EC: Calculate and display the quotient as a floating-point number, rounded to the nearest .001.",0
	   20 43 61 6C 63
	   75 6C 61 74 65
	   20 61 6E 64 20
	   64 69 73 70 6C
	   61 79 20 74 68
	   65 20 71 75 6F
	   74 69 65 6E 74
	   20 61 73 20 61
	   20 66 6C 6F 61
	   74 69 6E 67 2D
	   70 6F 69 6E 74
	   20 6E 75 6D 62
	   65 72 2C 20 72
	   6F 75 6E 64 65
	   64 20 74 6F 20
	   74 68 65 20 6E
	   65 61 72 65 73
	   74 20 2E 30 30
	   31 2E 00
 0000021A 45 6E 74 65 72		repeatMsg	BYTE	"Enter Q to quit or C to continue.",0
	   20 51 20 74 6F
	   20 71 75 69 74
	   20 6F 72 20 43
	   20 74 6F 20 63
	   6F 6E 74 69 6E
	   75 65 2E 00
 0000023C 59 6F 75 20 6D		promptError	BYTE	"You must enter Q or C!",0
	   75 73 74 20 65
	   6E 74 65 72 20
	   51 20 6F 72 20
	   43 21 00
 00000253 54 68 65 20 66		valueError	BYTE	"The first value must be greater than the second value.",0
	   69 72 73 74 20
	   76 61 6C 75 65
	   20 6D 75 73 74
	   20 62 65 20 67
	   72 65 61 74 65
	   72 20 74 68 61
	   6E 20 74 68 65
	   20 73 65 63 6F
	   6E 64 20 76 61
	   6C 75 65 2E 00
					
 0000028A 51				quit		BYTE	'Q'	; Quit value
 0000028B 43				continue	BYTE	'C'	; Continue value

					

				; Strings and characters for printing results
 0000028C 54 68 65 20 73		sumMsg		BYTE	"The sum is: ",0
	   75 6D 20 69 73
	   3A 20 00
 00000299 54 68 65 20 64		differenceMsg	BYTE	"The difference is: ",0
	   69 66 66 65 72
	   65 6E 63 65 20
	   69 73 3A 20 00
 000002AD 54 68 65 20 70		productMsg	BYTE	"The product is: ",0
	   72 6F 64 75 63
	   74 20 69 73 3A
	   20 00
 000002BE 54 68 65 20 69		quotientMsg	BYTE	"The integer quotient is: ",0
	   6E 74 65 67 65
	   72 20 71 75 6F
	   74 69 65 6E 74
	   20 69 73 3A 20
	   00
 000002D8 54 68 65 20 72		remainderMsg	BYTE	"The remainder of division is: ",0
	   65 6D 61 69 6E
	   64 65 72 20 6F
	   66 20 64 69 76
	   69 73 69 6F 6E
	   20 69 73 3A 20
	   00



 00000000			.data?

				; Variables for holding the two user-input values and the results of calculations

 00000000 00000000			value_1		DWORD	?	; First value entered by user
 00000004 00000000			value_2		DWORD	?	; Second value entered by user
 00000008 00000000			sum		DWORD	?	; store the sum of value_1 + value_2
 0000000C 00000000			difference	DWORD	?	; store the difference of value_1 - value_2
 00000010 00000000			product		DWORD	?	; store the product of value_1 * value_2
 00000014 00000000			quotient	DWORD	?	; store the integer quotient of value_1 / value_2
 00000018 00000000			remainder	DWORD	?	; store the remainder of value_1 / value_2
 0000001C 00				loopResponse	BYTE	?	; store user response if they wish to quit or continue



 00000000			.code
 00000000			main PROC

				; Change colors to white on black - default
 00000000  B8 0000000F			mov		eax,white (black * 16)	
 00000005  E8 00000000 E		call	SetTextColor

				; introduce program + programmer
 0000000A  BA 00000000 R		mov		edx, OFFSET programTitle
 0000000F  E8 00000000 E		call	WriteString
 00000014  BA 0000001B R		mov		edx, OFFSET myName
 00000019  E8 00000000 E		call	WriteString
 0000001E  E8 00000000 E		call	CrLf
					
					; Extra Credit 1 Implemented message
 00000023  BA 00000141 R		mov		edx, OFFSET ecIntro_1
 00000028  E8 00000000 E		call	WriteString
 0000002D  E8 00000000 E		call	CrLf
					
					; Extra Credit 2 Implemented message
 00000032  BA 00000173 R		mov		edx, OFFSET ecIntro_2
 00000037  E8 00000000 E		call	WriteString
 0000003C  E8 00000000 E		call	CrLf
					
					; Extra Credit 3 Implemented message
				;	mov		edx, OFFSET ecIntro_3
				;	call	WriteString
				;	call	CrLf



 00000041			MAINLOOP:

 00000041  E8 00000000 E		call	CrLf
 00000046  E8 00000000 E		call	CrLf

				; get two values, value_1 and value_2, from the user

					; print instructions
 0000004B  BA 00000034 R			mov		edx, OFFSET instruct_1
 00000050  E8 00000000 E			call	WriteString
 00000055  E8 00000000 E			call	CrLf
 0000005A  BA 0000007C R			mov		edx, OFFSET instruct_2
 0000005F  E8 00000000 E			call	WriteString
 00000064  E8 00000000 E			call	CrLf

					; print prompt for value_1
 00000069  BA 000000DF R			mov		edx, OFFSET promptVal_1
 0000006E  E8 00000000 E			call	WriteString
 00000073  E8 00000000 E			call	CrLf

					; get input value_1
 00000078  E8 00000000 E			call	ReadDec
 0000007D  A3 00000000 R			mov		value_1, eax

					; print prompt for value_2
 00000082  BA 00000110 R			mov		edx, OFFSET promptVal_2
 00000087  E8 00000000 E			call	WriteString
 0000008C  E8 00000000 E			call	CrLf

					; get input value_2
 00000091  E8 00000000 E			call	ReadDec
 00000096  A3 00000004 R			mov 	value_2, eax
						

				; **EC: 2. Validate the second number to be less than the first.
					; if value_2 > value_1, Jump to QUITPROMPT that controls main program loop
 0000009B  A1 00000004 R			mov 	eax, value_2
 000000A0  3B 05 00000000 R			cmp		eax, value_1
 000000A6  0F 8F 00000129			jg		INVALID
					

				; calculate the required values

					; Calculate the sum
 000000AC  A1 00000000 R			mov 	eax,value_1
 000000B1  03 05 00000004 R			add 	eax,value_2
 000000B7  A3 00000008 R			mov 	sum,eax

					; Calculate the difference
 000000BC  A1 00000000 R			mov 	eax,value_1
 000000C1  2B 05 00000004 R			sub 	eax,value_2
 000000C7  A3 0000000C R			mov 	difference,eax

					; Calculate the product
 000000CC  A1 00000000 R			mov 	eax,value_1
 000000D1  F7 25 00000004 R			mul 	value_2
 000000D7  A3 00000010 R			mov 	product,eax

					; Calculate the integer quotient (eax is divsor, ebx is dividend)
 000000DC  A1 00000000 R			mov		eax, value_1	
 000000E1  99					cdq	               	; zero-extends eax into edx
 000000E2  8B 1D 00000004 R			mov 	ebx, value_2
 000000E8  F7 F3				div 	ebx
 000000EA  A3 00000014 R			mov 	quotient, eax
 000000EF  89 15 00000018 R			mov 	remainder, edx

				; display the results

					; Print sum to screen with message
 000000F5  BA 0000028C R			mov		edx, OFFSET sumMsg
 000000FA  E8 00000000 E			call	WriteString
 000000FF  A1 00000008 R			mov		eax, sum
 00000104  E8 00000000 E			call	WriteDec
 00000109  E8 00000000 E			call	CrLf

					; Print difference to screen with message
 0000010E  BA 00000299 R			mov		edx, OFFSET differenceMsg
 00000113  E8 00000000 E			call	WriteString
 00000118  A1 0000000C R			mov		eax, difference
 0000011D  E8 00000000 E			call	WriteDec
 00000122  E8 00000000 E			call	CrLf

					; Print product to screen with message
 00000127  BA 000002AD R			mov		edx, OFFSET productMsg
 0000012C  E8 00000000 E			call	WriteString
 00000131  A1 00000010 R			mov		eax, product
 00000136  E8 00000000 E			call	WriteDec
 0000013B  E8 00000000 E			call	CrLf

					; Print quotient to screen with message
 00000140  BA 000002BE R			mov		edx, OFFSET quotientMsg
 00000145  E8 00000000 E			call	WriteString
 0000014A  A1 00000014 R			mov		eax, quotient
 0000014F  E8 00000000 E			call	WriteDec
 00000154  E8 00000000 E			call	CrLf

					; Print remainder to screen with message
 00000159  BA 000002D8 R			mov		edx, OFFSET remainderMsg
 0000015E  E8 00000000 E			call	WriteString
 00000163  A1 00000018 R			mov		eax, remainder
 00000168  E8 00000000 E			call	WriteDec
 0000016D  E8 00000000 E			call	CrLf
						

				; **EC: 1. Repeat until the user chooses to quit.

 00000172			QUITPROMPT:
					; Prompt user if they wish to (Q)uit or (C)ontinue 
 00000172  BA 0000021A R			mov		edx, OFFSET repeatMsg
 00000177  E8 00000000 E			call	WriteString
 0000017C  E8 00000000 E			call 	CrLf
					
					; Get loopResponse, convert to uppercase by clearing bit 5 (Page 192 of Irvine)
 00000181  E8 00000000 E			call 	ReadChar
 00000186  A2 0000001C R			mov 	loopResponse, al
 0000018B  80 25 0000001C R			and 	loopResponse, 11011111b	
	   DF
					
					; Compare loopResponse to continue ('C') and jump to MAINLOOP label if matches (Page 197+ of Irvine)
 00000192  A0 0000001C R			mov		al,loopResponse
 00000197  3A 05 0000028B R			cmp		al,continue	; ZF=1,CF=0 if loopResponse==source with unsigned operands
 0000019D  0F 84 FFFFFE9E			jz		MAINLOOP
					
					; Compare loopResponse to quit ('Q') and jump to GOODBYE label if matches (Page 197+ of Irvine)
 000001A3  A0 0000001C R			mov		al,loopResponse
 000001A8  3A 05 0000028A R			cmp		al,quit		
 000001AE  74 4D				jz		GOODBYE
						

					; Change colors to white on red - error
 000001B0  B8 0000004F				mov		eax,white (red * 16)	
 000001B5  E8 00000000 E			call	SetTextColor

					; Print error message if Q or C is not entered and repeat prompt
 000001BA  BA 0000023C R			mov		edx, OFFSET promptError
 000001BF  E8 00000000 E			call	WriteString
 000001C4  E8 00000000 E			call 	CrLf

					; Change colors to white on black - default
 000001C9  B8 0000000F				mov		eax,white (black * 16)	
 000001CE  E8 00000000 E			call	SetTextColor

 000001D3  EB 9D			jmp		QUITPROMPT



 000001D5			INVALID:	; Jump here from MAINLOOP if value_2 > value_1

					; Change colors to white on red - error
 000001D5  B8 0000004F				mov		eax,white (red * 16)	
 000001DA  E8 00000000 E			call	SetTextColor
					
					; Print error message that value_2 must be less than value_1, jump to reprompt
 000001DF  BA 00000253 R			mov		edx, OFFSET valueError
 000001E4  E8 00000000 E			call	WriteString
 000001E9  E8 00000000 E			call	CrLf

					; Change colors to white on black - default
 000001EE  B8 0000000F				mov		eax,white (black * 16)	
 000001F3  E8 00000000 E			call	SetTextColor
 000001F8  E9 FFFFFE44				jmp		MAINLOOP



				; say goodbye

 000001FD			GOODBYE:
					; print exitMsg
 000001FD  BA 000000B2 R			mov		edx, OFFSET exitMsg
 00000202  E8 00000000 E			call 	WriteString
 00000207  E8 00000000 E			call 	CrLf
						
					; exit to operating system
						exit	
 0000020C  6A 00	   *	    push   +000000000h
 0000020E  E8 00000000 E   *	    call   ExitProcess

 00000213			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    01/05/16 22:09:56
+Programming Assignment 1    (project01.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_BSS . . . . . . . . . . . . . .	32 Bit	 0000001D Para	  Public  'BSS'  
_DATA  . . . . . . . . . . . . .	32 Bit	 000002F7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000213 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000213 Public STDCALL
  MAINLOOP . . . . . . . . . . .	L Near	 00000041 _TEXT	
  QUITPROMPT . . . . . . . . . .	L Near	 00000172 _TEXT	
  INVALID  . . . . . . . . . . .	L Near	 000001D5 _TEXT	
  GOODBYE  . . . . . . . . . . .	L Near	 000001FD _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
continue . . . . . . . . . . . .	Byte	 0000028B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
differenceMsg  . . . . . . . . .	Byte	 00000299 _DATA	
difference . . . . . . . . . . .	DWord	 0000000C _BSS	
ecIntro_1  . . . . . . . . . . .	Byte	 00000141 _DATA	
ecIntro_2  . . . . . . . . . . .	Byte	 00000173 _DATA	
ecIntro_3  . . . . . . . . . . .	Byte	 000001B8 _DATA	
exitMsg  . . . . . . . . . . . .	Byte	 000000B2 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruct_1 . . . . . . . . . . .	Byte	 00000034 _DATA	
instruct_2 . . . . . . . . . . .	Byte	 0000007C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loopResponse . . . . . . . . . .	Byte	 0000001C _BSS	
magenta  . . . . . . . . . . . .	Number	 00000005h   
myName . . . . . . . . . . . . .	Byte	 0000001B _DATA	
productMsg . . . . . . . . . . .	Byte	 000002AD _DATA	
product  . . . . . . . . . . . .	DWord	 00000010 _BSS	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
promptError  . . . . . . . . . .	Byte	 0000023C _DATA	
promptVal_1  . . . . . . . . . .	Byte	 000000DF _DATA	
promptVal_2  . . . . . . . . . .	Byte	 00000110 _DATA	
quit . . . . . . . . . . . . . .	Byte	 0000028A _DATA	
quotientMsg  . . . . . . . . . .	Byte	 000002BE _DATA	
quotient . . . . . . . . . . . .	DWord	 00000014 _BSS	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainderMsg . . . . . . . . . .	Byte	 000002D8 _DATA	
remainder  . . . . . . . . . . .	DWord	 00000018 _BSS	
repeatMsg  . . . . . . . . . . .	Byte	 0000021A _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 0000028C _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000008 _BSS	
valueError . . . . . . . . . . .	Byte	 00000253 _DATA	
value_1  . . . . . . . . . . . .	DWord	 00000000 _BSS	
value_2  . . . . . . . . . . . .	DWord	 00000004 _BSS	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
