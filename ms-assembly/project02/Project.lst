Microsoft (R) Macro Assembler Version 14.00.23506.0	    01/16/16 17:19:26
+Programming Assignment 2    (project02.asm		     Page 1 - 1


				TITLE Programming Assignment 2    (project02.asm)

				; ==========================================================================================================
				; Author: Shawn S Hillyer								Email: hillyers@oregonstate.edu
				; CS271-400 / Project ID: Programming Assignment 2		Due Date: 01/24/2016
				; ==========================================================================================================
				; [Description]  
				; Write a program to calculate Fibonacci numbers.
				; 	A. Display the program title and programmer’s name. Then get the user’s name, and greet the user.
				; 	B. Prompt the user to enter the number of Fibonacci terms to be displayed. 
				;	   Advise the user to enter an integer in the range [1 .. 46].
				; 	C. Get and validate the user input (n).
				; 	D. Calculate and display all of the Fibonacci numbers up to and including the nth term. 
				; 	E. The results should be displayed 5 terms per line with at least 5 spaces between terms.
				; 	F. Display a parting message that includes the user’s name, and terminate the program.
				; ==========================================================================================================
				; [Requirements]
				; 	1. The programmer’s name and the user’s name must appear in the output.
				; 	2. The loop that implements data validation must be implemented as a post-test loop.
				;	3. The loop that calculates the Fibonacci terms must be implemented using the MASM loop instruction.
				; 	4. The main procedure must be modularized into at least the following sections 
				;          (procedures are not required this time):
				; 	   a. introduction	b. userInstructions	c. getUserData	d. displayFibs	e. farewell
				;	5. Recursive solutions are not acceptable for this assignment. This one is about iteration.
				;	6. The upper limit should be defined and used as a constant.
				;	7. The usual requirements regarding documentation, readability, user-friendliness, etc., apply.
				; ==========================================================================================================
				; [Extra-credit options]
				; [Implemented]		1.  Display the numbers in aligned columns.
				; [Not Implemented]	2.  Do something incredible.


				INCLUDE Irvine32.inc  
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; *********************
				; Constants           *
				; *********************

 = 0000002E			MAX_FIB = 46	; highest fibonnaci sequence we can do
 = 00000010			COL_DIST = 16	; distance to put between first digit of numbers in each column

				; *********************
				; .data: Variables    *
				; *********************

 00000000			.data

				; Strings - Output
 00000000 46 69 62 6F 6E		intro			BYTE	"Fibonacci Numbers",0
	   61 63 63 69 20
	   4E 75 6D 62 65
	   72 73 00
 00000012 62 79 20 53 68		programmer		BYTE	"by Shawn S Hillyer",0
	   61 77 6E 20 53
	   20 48 69 6C 6C
	   79 65 72 00
 00000025 2A 2A 45 43 3A		ecIntro_1		BYTE	"**EC: Displays the numbers in aligned columns.",0
	   20 44 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 69 6E 20
	   61 6C 69 67 6E
	   65 64 20 63 6F
	   6C 75 6D 6E 73
	   2E 00
 00000054 57 68 61 74 20		name_prompt		BYTE	"What is your name?",0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 00
 00000067 48 65 6C 6C 6F		greeting		BYTE	"Hello, ",0
	   2C 20 00
					
 0000006F 45 6E 74 65 72		instructions1	BYTE	"Enter the number of Fibonacci terms to be displayed",0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   46 69 62 6F 6E
	   61 63 63 69 20
	   74 65 72 6D 73
	   20 74 6F 20 62
	   65 20 64 69 73
	   70 6C 61 79 65
	   64 00
 000000A3 47 69 76 65 20		instructions2	BYTE	"Give the number as an integer in the range [1 .. ",0
	   74 68 65 20 6E
	   75 6D 62 65 72
	   20 61 73 20 61
	   6E 20 69 6E 74
	   65 67 65 72 20
	   69 6E 20 74 68
	   65 20 72 61 6E
	   67 65 20 5B 31
	   20 2E 2E 20 00
 000000D5 5D 2E 00			range_end		BYTE	"].",0
 000000D8 48 6F 77 20 6D		fib_prompt		BYTE	"How many Fibonacci terms do you want?",0
	   61 6E 79 20 46
	   69 62 6F 6E 61
	   63 63 69 20 74
	   65 72 6D 73 20
	   64 6F 20 79 6F
	   75 20 77 61 6E
	   74 3F 00
 000000FE 54 68 61 6E 6B		okay_msg		BYTE	"Thanks. Printing the sequence next...",0
	   73 2E 20 50 72
	   69 6E 74 69 6E
	   67 20 74 68 65
	   20 73 65 71 75
	   65 6E 63 65 20
	   6E 65 78 74 2E
	   2E 2E 00
 00000124 4F 75 74 20 6F		err_range		BYTE	"Out of range. Enter a number in [1 ..",0
	   66 20 72 61 6E
	   67 65 2E 20 45
	   6E 74 65 72 20
	   61 20 6E 75 6D
	   62 65 72 20 69
	   6E 20 5B 31 20
	   2E 2E 00

 0000014A 49 74 27 73 20		goodbye1		BYTE	"It's pronounced fee-boh-NOT-shee!",0
	   70 72 6F 6E 6F
	   75 6E 63 65 64
	   20 66 65 65 2D
	   62 6F 68 2D 4E
	   4F 54 2D 73 68
	   65 65 21 00
 0000016C 47 6F 6F 64 62		goodbye2		BYTE	"Goodbye, ",0
	   79 65 2C 20 00

				; Strings - Input
 00000176  0000001E [			user_name		BYTE	30 DUP(0)	; input buffer
	    00
	   ]

				; Fibonnaci variables
 00000194 00000001			fib_1			DWORD	1
 00000198 00000001			fib_2			DWORD	1
 0000019C 00000000			current_term	DWORD	?
 000001A0 00000000			current_fib		DWORD	?
 000001A4 00000000			nth_fib			DWORD	?

				; Output formatting
 000001A8 00000000			line_count		DWORD	0;
 000001AC 00				col				BYTE	0;
 000001AD 00				row				BYTE	0;

 00000000			.code

				; +--------------------+
				; |     MoveCursor     |
				; +--------------------+
 00000000			MoveCursor	PROC
				; Move cursor and then increment col for next pass
 00000000  A0 000001AC R		mov		al, col
 00000005  04 10			add		al, COL_DIST
 00000007  A2 000001AC R		mov		col, al

 0000000C  8A 35 000001AD R		mov 	dh, row
 00000012  8A 15 000001AC R		mov		dl, col
 00000018  E8 00000000 E		call	Gotoxy

 0000001D  C3				ret
 0000001E			MoveCursor ENDP


				; +--------------------+
				; |     UpdateFib      |
				; +--------------------+
 0000001E			UpdateFib	PROC
				; current_fib = fib_1 + fib_2
 0000001E  A1 00000194 R		mov 	eax, fib_1
 00000023  03 05 00000198 R		add		eax, fib_2
 00000029  A3 000001A0 R		mov		current_fib, eax

				; fib_2 = fib_1
 0000002E  A1 00000194 R		mov		eax, fib_1
 00000033  A3 00000198 R		mov		fib_2, eax

				; fib_1 = current_fib
 00000038  A1 000001A0 R		mov		eax, current_fib
 0000003D  A3 00000194 R		mov		fib_1, eax
 00000042  C3				ret
 00000043			UpdateFib ENDP

				; +--------------------+
				; |       MAIN         |
				; +--------------------+

 00000043			main PROC

				; *********************
				; a. introduction     *
				; *********************

 00000043  E8 00000000 E		call Clrscr

				; Print Program Title and Programmer's Name
 00000048  BA 00000000 R		mov		edx, OFFSET intro
 0000004D  E8 00000000 E		call 	WriteString 
 00000052  E8 00000000 E		call 	CrLf

 00000057  BA 00000012 R		mov		edx, OFFSET programmer
 0000005C  E8 00000000 E		call 	WriteString 
 00000061  E8 00000000 E		call 	CrLf

				; Extra Credit 1 Implemented message
 00000066  BA 00000025 R		mov		edx, OFFSET ecIntro_1
 0000006B  E8 00000000 E		call	WriteString
 00000070  E8 00000000 E		call	CrLf
 00000075  E8 00000000 E		call	CrLf

				; Prompt for and Get the user's name as a string
 0000007A  BA 00000054 R		mov		edx, OFFSET name_prompt
 0000007F  E8 00000000 E		call 	WriteString 
 00000084  E8 00000000 E		call 	CrLf

 00000089  BA 00000176 R		mov		edx, OFFSET user_name
 0000008E  B9 0000001E			mov		ecx, SIZEOF user_name
 00000093  E8 00000000 E		call	ReadString
					
				; Greet the user
 00000098  BA 00000067 R		mov		edx, OFFSET greeting
 0000009D  E8 00000000 E		call 	WriteString 
 000000A2  BA 00000176 R		mov		edx, OFFSET user_name
 000000A7  E8 00000000 E		call 	WriteString 
 000000AC  E8 00000000 E		call 	CrLf
 000000B1  E8 00000000 E		call	CrLf


				; *********************
				; b. userInstructions *
				; *********************

				; Print description of what program will do
 000000B6  BA 0000006F R		mov		edx, OFFSET instructions1
 000000BB  E8 00000000 E		call 	WriteString 
 000000C0  E8 00000000 E		call 	CrLf

				; Print instructions
 000000C5  BA 000000A3 R		mov		edx, OFFSET instructions2
 000000CA  E8 00000000 E		call 	WriteString 
 000000CF  B8 0000002E			mov		eax, MAX_FIB;
 000000D4  E8 00000000 E		call	WriteDec
 000000D9  BA 000000D5 R		mov		edx, OFFSET range_end
 000000DE  E8 00000000 E		call 	WriteString 
 000000E3  E8 00000000 E		call 	CrLf
 000000E8  E8 00000000 E		call	CrLf

				; *********************
				; c. getUserData      *
				; *********************

				; Print prompt
 000000ED  BA 000000D8 R		mov 	edx, OFFSET fib_prompt
 000000F2  E8 00000000 E		call	WriteString
 000000F7  E8 00000000 E		call	CrLf

				; Get user input

 000000FC			START_USER_DATA:  ; post-test loop (reads in the int before looping)
 000000FC  E8 00000000 E		call	ReadInt
 00000101  A3 000001A4 R		mov		nth_fib, eax
					
				; IF nth_fib < 1 || nth_fib > MAX_FIB print error message and prompt again
 00000106  A1 000001A4 R		mov 	eax, nth_fib
					
 0000010B  83 F8 01			cmp 	eax, 1
 0000010E  7C 20			jl 		OUT_OF_RANGE

 00000110  83 F8 2E			cmp 	eax, MAX_FIB 
 00000113  7F 1B			jg 		OUT_OF_RANGE

				; ELSE print confirmation and jump over OUT_OF_RANGE to END_USER_DATA
 00000115  BA 000000FE R		mov 	edx, OFFSET okay_msg
 0000011A  E8 00000000 E		call	WriteString
 0000011F  E8 00000000 E		call	CrLf
 00000124  E8 00000000 E		call	WaitMsg
 00000129  E8 00000000 E		call	clrscr
 0000012E  EB 2A			jmp 	END_USER_DATA


 00000130			OUT_OF_RANGE:

				; Print error message and jump back up
 00000130  BA 00000124 R		mov 	edx, OFFSET err_range
 00000135  E8 00000000 E		call	WriteString
 0000013A  B8 0000002E			mov		eax, MAX_FIB;
 0000013F  E8 00000000 E		call	WriteDec
 00000144  BA 000000D5 R		mov		edx, OFFSET range_end
 00000149  E8 00000000 E		call 	WriteString 
 0000014E  E8 00000000 E		call 	CrLf
 00000153  E8 00000000 E		call	CrLf
 00000158  EB A2			jmp 	START_USER_DATA  	; loop through input and validation again


 0000015A			END_USER_DATA:



				; *********************
				; d. displayFibs      *
				; *********************

				; Set up various loop control variables & counters
 0000015A  8B 0D 000001A4 R		mov 	ecx, nth_fib		; for FIB_SEQUENCE loop
 00000160  C7 05 0000019C R		mov 	current_term, 1		; the current term (the "nth" term) of the fib seq
	   00000001
 0000016A  C7 05 000001A0 R		mov		current_fib, 1		; the current fibonnaci number to print
	   00000001
 00000174  C7 05 00000194 R		mov		fib_1, 1			; nth fibonnaci - 1 (1 prior to current term)
	   00000001
 0000017E  C7 05 00000198 R		mov 	fib_2, 1			; nth fibonnaci - 2 (2 prior to current term)
	   00000001
 00000188  C7 05 000001A8 R		mov		line_count, 0		; count of values printed on current line so far
	   00000000

 00000192			FIB_SEQUENCE:	; repeats nth_fib times

				; IF current_term > 2, jump over FIRST_TWO
 00000192  A1 0000019C R		mov		eax, current_term
 00000197  83 F8 02			cmp		eax, 2
 0000019A  7F 0C			jg		END_FIRST_TWO

 0000019C			FIRST_TWO:
				; set current_term to 1 for the base cases (n = 1 and n = 2) 	
 0000019C  C7 05 000001A0 R		mov		current_fib, 1
	   00000001
 000001A6  EB 05			jmp		END_ELSE

 000001A8			END_FIRST_TWO:
					
 000001A8  E8 FFFFFE71			call	UpdateFib

 000001AD			END_ELSE: 

				; print current_fib
 000001AD  A1 000001A0 R		mov		eax, current_fib		; explicit in case I add code later
 000001B2  E8 00000000 E		call	WriteDec
 000001B7  E8 FFFFFE44			call	MoveCursor

				; increment manual counters
 000001BC  FF 05 0000019C R		inc		current_term
 000001C2  FF 05 000001A8 R		inc		line_count

				;  if line_count == 5, make a linebreak
 000001C8  A1 000001A8 R		mov 	eax, line_count
 000001CD  83 F8 05			cmp 	eax, 5
 000001D0  75 24			jne 	LINE_BREAK_END

 000001D2			LINE_BREAK:
 000001D2  FE 05 000001AD R		inc		row
 000001D8  C6 05 000001AC R		mov		col, 0
	   00
 000001DF  8A 35 000001AD R		mov 	dh, row
 000001E5  B2 00			mov		dl, 0
 000001E7  E8 00000000 E		call	Gotoxy
 000001EC  C7 05 000001A8 R		mov		line_count, 0
	   00000000

 000001F6			LINE_BREAK_END:

 000001F6  E2 9A			loop 	FIB_SEQUENCE



				; *********************
				; e. farewell         *
				; *********************

				; Add some space and say goodbye
 000001F8  E8 00000000 E		call 	CrLf
 000001FD  E8 00000000 E		call 	CrLf

 00000202  BA 0000014A R		mov 	edx, OFFSET goodbye1
 00000207  E8 00000000 E		call 	WriteString
 0000020C  E8 00000000 E		call 	CrLf
					
 00000211  BA 0000016C R		mov 	edx, OFFSET goodbye2
 00000216  E8 00000000 E		call 	WriteString
 0000021B  BA 00000176 R		mov		edx, OFFSET user_name
 00000220  E8 00000000 E		call	WriteString
 00000225  E8 00000000 E		call 	CrLf
 0000022A  E8 00000000 E		call 	CrLf

					exit	; exit to operating system  
 0000022F  6A 00	   *	    push   +000000000h
 00000231  E8 00000000 E   *	    call   ExitProcess

 00000236			main ENDP

				; +--------------------+
				; |     END MAIN       |
				; +--------------------+


				END main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    01/16/16 17:19:26
+Programming Assignment 2    (project02.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001AE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000236 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MoveCursor . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001E Public STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateFib  . . . . . . . . . . .	P Near	 0000001E _TEXT	Length= 00000025 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000043 _TEXT	Length= 000001F3 Public STDCALL
  START_USER_DATA  . . . . . . .	L Near	 000000FC _TEXT	
  OUT_OF_RANGE . . . . . . . . .	L Near	 00000130 _TEXT	
  END_USER_DATA  . . . . . . . .	L Near	 0000015A _TEXT	
  FIB_SEQUENCE . . . . . . . . .	L Near	 00000192 _TEXT	
  FIRST_TWO  . . . . . . . . . .	L Near	 0000019C _TEXT	
  END_FIRST_TWO  . . . . . . . .	L Near	 000001A8 _TEXT	
  END_ELSE . . . . . . . . . . .	L Near	 000001AD _TEXT	
  LINE_BREAK . . . . . . . . . .	L Near	 000001D2 _TEXT	
  LINE_BREAK_END . . . . . . . .	L Near	 000001F6 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COL_DIST . . . . . . . . . . . .	Number	 00000010h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_FIB  . . . . . . . . . . . .	Number	 0000002Eh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
col  . . . . . . . . . . . . . .	Byte	 000001AC _DATA	
current_fib  . . . . . . . . . .	DWord	 000001A0 _DATA	
current_term . . . . . . . . . .	DWord	 0000019C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ecIntro_1  . . . . . . . . . . .	Byte	 00000025 _DATA	
err_range  . . . . . . . . . . .	Byte	 00000124 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fib_1  . . . . . . . . . . . . .	DWord	 00000194 _DATA	
fib_2  . . . . . . . . . . . . .	DWord	 00000198 _DATA	
fib_prompt . . . . . . . . . . .	Byte	 000000D8 _DATA	
goodbye1 . . . . . . . . . . . .	Byte	 0000014A _DATA	
goodbye2 . . . . . . . . . . . .	Byte	 0000016C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000067 _DATA	
instructions1  . . . . . . . . .	Byte	 0000006F _DATA	
instructions2  . . . . . . . . .	Byte	 000000A3 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line_count . . . . . . . . . . .	DWord	 000001A8 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
name_prompt  . . . . . . . . . .	Byte	 00000054 _DATA	
nth_fib  . . . . . . . . . . . .	DWord	 000001A4 _DATA	
okay_msg . . . . . . . . . . . .	Byte	 000000FE _DATA	
programmer . . . . . . . . . . .	Byte	 00000012 _DATA	
range_end  . . . . . . . . . . .	Byte	 000000D5 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
row  . . . . . . . . . . . . . .	Byte	 000001AD _DATA	
user_name  . . . . . . . . . . .	Byte	 00000176 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
